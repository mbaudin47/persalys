[0.0597305]
[0.0597305]
#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

study1 = otguibase.OTStudy('study1')
otguibase.OTStudy.Add(study1)
dist_Q = ot.Normal(10200, 100)
Q = otguibase.Input('Q', 0, dist_Q, 'Primary energy')
dist_E = ot.Normal(3000, 15)
E = otguibase.Input('E', 0, dist_E, 'Produced electric energy')
dist_C = ot.Normal(4000, 60)
C = otguibase.Input('C', 0, dist_C, 'Valued thermal energy')
Ep = otguibase.Output('Ep', 'Primary energy savings')
inputs = [Q, E, C]
outputs = [Ep]
formulas = ['1-(Q/((E/((1-0.05)*0.54))+(C/0.8)))']
analyticalModel1 = otguibase.SymbolicPhysicalModel('analyticalModel1', inputs, outputs, formulas)
study1.add(analyticalModel1)
dist_Q = ot.Normal(10200, 100)
Q = otguibase.Input('Q', 0, dist_Q, 'Primary energy')
dist_E = ot.Normal(3000, 15)
E = otguibase.Input('E', 0, dist_E, 'Produced electric energy')
dist_C = ot.Normal(4000, 60)
C = otguibase.Input('C', 0, dist_C, 'Valued thermal energy')
Ep = otguibase.Output('Ep', 'Primary energy savings')
pythonModel1 = otguibase.PythonPhysicalModel('pythonModel1')
pythonModel1.addInput(Q)
pythonModel1.addInput(E)
pythonModel1.addInput(C)
pythonModel1.addOutput(Ep)
pythonModel1.setCode('def _exec(Q, E, C):\n    Ep = 1-(Q/((E/((1-0.05)*0.54))+(C/0.8)))\n    return [Ep]\n')
study1.add(pythonModel1)

