[13.0208]




 dans computeSobolIndices inputSample1_ [3.63475e+07,21373.8,253.306,435.587] [2.80923e+07,30617.8,253.613,439.01]





 dans computeSobolIndices inputSample2_ [3.45698e+07,35283,252.291,424.949] [3.10269e+07,21942.1,251.056,418.806]





 dans computeSobolIndices outputSample1 [7.31388] [13.4991]





 dans computeSobolIndices outputSample2 [12.8563] [8.90678]





 dans computeSobolIndices av normalize 

#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

myStudy = otguibase.OTStudy('myStudy')
otguibase.OTStudy.Add(myStudy)
dist_E = ot.Beta(0.93, 3.2, 2.8e+07, 4.8e+07)
E = otguibase.Input('E', 3e+07, 'Young s modulus', dist_E)
dist_F = ot.LogNormal(9.46206, 0.554513, 15000)
F = otguibase.Input('F', 30000, 'Charge applied', dist_F)
dist_L = ot.Uniform(250, 260)
L = otguibase.Input('L', 250, 'Length', dist_L)
dist_I = ot.Beta(2.5, 4, 310, 450)
I = otguibase.Input('I', 400, 'Section modulus', dist_I)
y = otguibase.Output('y', 0, 'deviation', 'F*L^3/(3*E*I)')
myPhysicalModel = otguibase.AnalyticalPhysicalModel('myPhysicalModel')
myPhysicalModel.addInput(E)
myPhysicalModel.addInput(F)
myPhysicalModel.addInput(L)
myPhysicalModel.addInput(I)
myPhysicalModel.addOutput(y)
correlationMatrix = ot.CorrelationMatrix(4)
correlationMatrix[2, 3] = -0.2
copula = ot.NormalCopula(ot.NormalCopula.GetCorrelationFromSpearmanCorrelation(correlationMatrix))
myPhysicalModel.setCopula(copula)
myStudy.add(myPhysicalModel)
values = [3e+07, 30000, 250, 400]
lowerBounds = [2.83502e+07, 20166.6, 250.5, 342.975]
upperBounds = [4.24148e+07, 47021.3, 259.5, 441.262]
levels = [2, 2, 2, 2]
aDesign = otguibase.DesignOfExperiment('aDesign', myPhysicalModel, lowerBounds, upperBounds, levels, values)
myStudy.add(aDesign)
limitState1 = otguibase.LimitState('limitState1', myPhysicalModel, 'y', ot.Greater(), 30)
myStudy.add(limitState1)
myTaylorExpansionsMoments = otguibase.TaylorExpansionsMomentsAnalysis('myTaylorExpansionsMoments', myPhysicalModel)
myStudy.add(myTaylorExpansionsMoments)
myMonteCarlo = otguibase.MonteCarloAnalysis('myMonteCarlo', myPhysicalModel, 1000)
myMonteCarlo.setSeed(0)
myStudy.add(myMonteCarlo)
mySobol = otguibase.SobolAnalysis('mySobol', myPhysicalModel, 1000)
mySobol.setSeed(0)
myStudy.add(mySobol)
mySRC = otguibase.SRCAnalysis('mySRC', myPhysicalModel, 1000)
mySRC.setSeed(0)
myStudy.add(mySRC)
myMonteCarloSimu = otguibase.MonteCarloReliabilityAnalysis('myMonteCarloSimu', limitState1, 10000)
myMonteCarloSimu.setMaximumCoefficientOfVariation(0.1)
myMonteCarloSimu.setBlockSize(1)
myMonteCarloSimu.setSeed(0)
myStudy.add(myMonteCarloSimu)

