#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import persalys

myStudy = persalys.Study('myStudy')
persalys.Study.Add(myStudy)
dist_Q = ot.Normal(10200, 100)
Q = persalys.Input('Q', 10200, dist_Q, 'Primary energy (W.h)')
dist_E = ot.Normal(3000, 15)
E = persalys.Input('E', 3000, dist_E, 'Produced electric energy (W.h)')
dist_C = ot.Normal(4000, 60)
C = persalys.Input('C', 4000, dist_C, 'Valued thermal energy (W.h)')
Ep = persalys.Output('Ep', 'Primary energy savings (W.h)')
inputs = [Q, E, C]
outputs = [Ep]
formulas = ['1-(Q/((E/((1-0.05)*0.54))+(C/0.8)))']
myPhysicalModel = persalys.SymbolicPhysicalModel('myPhysicalModel', inputs, outputs, formulas)
myStudy.add(myPhysicalModel)
values = [10200,3000,4000]
lowerBounds = [10035.5,2975.33,3901.31]
upperBounds = [10364.5,3024.67,4098.69]
levels = [2,2,2]
aDesign_0 = persalys.GridDesignOfExperiment('aDesign_0', myPhysicalModel, lowerBounds, upperBounds, levels, values)
aDesign_0.setBlockSize(1)
interestVariables = ['Ep']
aDesign_0.setInterestVariables(interestVariables)
myStudy.add(aDesign_0)
myTaylorExpansionMoments = persalys.TaylorExpansionMomentsAnalysis('myTaylorExpansionMoments', myPhysicalModel)
myStudy.add(myTaylorExpansionMoments)
myMonteCarlo = persalys.MonteCarloAnalysis('myMonteCarlo', myPhysicalModel)
myMonteCarlo.setMaximumCalls(1000)
myMonteCarlo.setMaximumCoefficientOfVariation(-1)
myMonteCarlo.setMaximumElapsedTime(60)
myMonteCarlo.setBlockSize(1)
myMonteCarlo.setSeed(0)
myStudy.add(myMonteCarlo)
mySobol = persalys.SobolAnalysis('mySobol', myPhysicalModel)
mySobol.setMaximumCalls(1000)
mySobol.setMaximumConfidenceIntervalLength(0.01)
mySobol.setMaximumElapsedTime(60)
mySobol.setBlockSize(1)
mySobol.setReplicationSize(200)
mySobol.setSeed(0)
mySobol.setConfidenceLevel(0.95)
myStudy.add(mySobol)
mySRC = persalys.SRCAnalysis('mySRC', myPhysicalModel, 10000)
mySRC.setBlockSize(1)
mySRC.setSeed(0)
myStudy.add(mySRC)
values = [10200,3000,4000]
lowerBounds = [10035.5,2975.33,3901.31]
upperBounds = [10364.5,3024.67,4098.69]
levels = [10,10,10]
aDesign_1 = persalys.GridDesignOfExperiment('aDesign_1', myPhysicalModel, lowerBounds, upperBounds, levels, values)
aDesign_1.setBlockSize(1)
interestVariables = ['Ep']
aDesign_1.setInterestVariables(interestVariables)
myStudy.add(aDesign_1)
chaos_0 = persalys.FunctionalChaosAnalysis('chaos_0', aDesign_1)
chaos_0.setChaosDegree(2)
chaos_0.setSparseChaos(False)
chaos_0.setAnalyticalValidation(True)
chaos_0.setTestSampleValidation(False)
chaos_0.setKFoldValidation(False)
myStudy.add(chaos_0)

