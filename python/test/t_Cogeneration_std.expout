#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

myStudy = otguibase.OTStudy('myStudy')
otguibase.OTStudy.Add(myStudy)
dist_Q = ot.Normal(10200, 100)
Q = otguibase.Input('Q', 10200, dist_Q, 'Primary energy (W.h)')
dist_E = ot.Normal(3000, 15)
E = otguibase.Input('E', 3000, dist_E, 'Produced electric energy (W.h)')
dist_C = ot.Normal(4000, 60)
C = otguibase.Input('C', 4000, dist_C, 'Valued thermal energy (W.h)')
Ep = otguibase.Output('Ep', 'Primary energy savings (W.h)')
inputs = [Q, E, C]
outputs = [Ep]
formulas = ['1-(Q/((E/((1-0.05)*0.54))+(C/0.8)))']
myPhysicalModel = otguibase.SymbolicPhysicalModel('myPhysicalModel', inputs, outputs, formulas)
myStudy.add(myPhysicalModel)
values = [10200, 3000, 4000]
lowerBounds = [10035.5, 2975.33, 3901.31]
upperBounds = [10364.5, 3024.67, 4098.69]
levels = [2, 2, 2]
aDesign_0 = otguibase.GridDesignOfExperiment('aDesign_0', myPhysicalModel, lowerBounds, upperBounds, levels, values)
myStudy.add(aDesign_0)
aDesign_0.run()
values = [10200, 3000, 4000]
lowerBounds = [10035.5, 2975.33, 3901.31]
upperBounds = [10364.5, 3024.67, 4098.69]
levels = [10, 10, 10]
aDesign_1 = otguibase.GridDesignOfExperiment('aDesign_1', myPhysicalModel, lowerBounds, upperBounds, levels, values)
myStudy.add(aDesign_1)
aDesign_1.run()
myTaylorExpansionMoments = otguibase.TaylorExpansionMomentsAnalysis('myTaylorExpansionMoments', myPhysicalModel)
myStudy.add(myTaylorExpansionMoments)
myMonteCarlo = otguibase.MonteCarloAnalysis('myMonteCarlo', myPhysicalModel)
myMonteCarlo.setMaximumCalls(1000)
myMonteCarlo.setMaximumCoefficientOfVariation(-1)
myMonteCarlo.setMaximumElapsedTime(60)
myMonteCarlo.setBlockSize(1)
myMonteCarlo.setSeed(0)
myStudy.add(myMonteCarlo)
mySobol = otguibase.SobolAnalysis('mySobol', myPhysicalModel)
mySobol.setMaximumCalls(1000)
mySobol.setMaximumCoefficientOfVariation(-1)
mySobol.setMaximumElapsedTime(60)
mySobol.setBlockSize(200)
mySobol.setSeed(0)
myStudy.add(mySobol)
mySRC = otguibase.SRCAnalysis('mySRC', myPhysicalModel, 10000)
mySRC.setSeed(0)
myStudy.add(mySRC)
chaos_0 = otguibase.FunctionalChaosAnalysis('chaos_0', aDesign_1)
chaos_0.setChaosDegree(2)
chaos_0.setSparseChaos(False)
chaos_0.setLeaveOneOutValidation(False)
myStudy.add(chaos_0)

