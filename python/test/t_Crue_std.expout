#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

myStudy = otguibase.Study('myStudy')
otguibase.Study.Add(myStudy)
dist_Q = ot.Gumbel(0.00179211, 1013)
dist_Q = ot.TruncatedDistribution(dist_Q, 0)
Q = otguibase.Input('Q', 1000, dist_Q, 'Débit maximal annuel (m3/s)')
dist_Ks = ot.Normal(30, 7.5)
dist_Ks = ot.TruncatedDistribution(dist_Ks, 0)
Ks = otguibase.Input('Ks', 30, dist_Ks, 'Strickler (m^(1/3)/s)')
dist_Zv = ot.Uniform(49, 51)
Zv = otguibase.Input('Zv', 50, dist_Zv, 'Côte de la rivière en aval (m)')
dist_Zm = ot.Uniform(54, 56)
Zm = otguibase.Input('Zm', 55, dist_Zm, 'Côte de la rivière en amont (m)')
S = otguibase.Output('S', 'Surverse (m)')
inputs = [Q, Ks, Zv, Zm]
outputs = [S]
formulas = ['(Q/(Ks*300.*sqrt((Zm-Zv)/5000)))^(3.0/5.0)+Zv-55.5-3.']
myPhysicalModel = otguibase.SymbolicPhysicalModel('myPhysicalModel', inputs, outputs, formulas)
myStudy.add(myPhysicalModel)
limitState1 = otguibase.LimitState('limitState1', myPhysicalModel, 'S', ot.Greater(), 0)
myStudy.add(limitState1)
myMonteCarlo = otguibase.MonteCarloReliabilityAnalysis('myMonteCarlo', limitState1)
myMonteCarlo.setMaximumCalls(10000)
myMonteCarlo.setMaximumCoefficientOfVariation(0.01)
myMonteCarlo.setMaximumElapsedTime(60)
myMonteCarlo.setBlockSize(1)
myMonteCarlo.setSeed(0)
myStudy.add(myMonteCarlo)
myformIS = otguibase.FORMImportanceSamplingAnalysis('myformIS', limitState1)
myformIS.setMaximumCalls(10000)
myformIS.setMaximumCoefficientOfVariation(0.01)
myformIS.setMaximumElapsedTime(60)
myformIS.setBlockSize(1000)
myformIS.setSeed(0)
myformIS.setPhysicalStartingPoint([1338.13,30.001,50,55])
optimizationAlgo = ot.Cobyla()
optimizationAlgo.setMaximumEvaluationNumber(100)
optimizationAlgo.setMaximumAbsoluteError(1e-05)
optimizationAlgo.setMaximumRelativeError(1e-05)
optimizationAlgo.setMaximumResidualError(1e-05)
optimizationAlgo.setMaximumConstraintError(1e-05)
myformIS.setOptimizationAlgorithm(optimizationAlgo)
myStudy.add(myformIS)

