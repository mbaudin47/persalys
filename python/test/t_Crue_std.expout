#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

myStudy = otguibase.OTStudy('myStudy')
otguibase.OTStudy.Add(myStudy)
dist_Q = ot.Gumbel(0.00179211, 1013)
dist_Q = ot.TruncatedDistribution(dist_Q, 0)
Q = otguibase.Input('Q', 0, 'Q (m3/s)', dist_Q)
dist_Ks = ot.Normal(30, 7.5)
dist_Ks = ot.TruncatedDistribution(dist_Ks, 0)
Ks = otguibase.Input('Ks', 0, 'Ks (m^(1/3)/s)', dist_Ks)
dist_Zv = ot.Uniform(49, 51)
Zv = otguibase.Input('Zv', 0, 'Zv (m)', dist_Zv)
dist_Zm = ot.Uniform(54, 56)
Zm = otguibase.Input('Zm', 0, 'Zm (m)', dist_Zm)
S = otguibase.Output('S', 0, '', '(Q/(Ks*300.*sqrt((Zm-Zv)/5000)))^(3.0/5.0)+Zv-55.5-3.')
myPhysicalModel = otguibase.AnalyticalPhysicalModel('myPhysicalModel')
myPhysicalModel.addInput(Q)
myPhysicalModel.addInput(Ks)
myPhysicalModel.addInput(Zv)
myPhysicalModel.addInput(Zm)
myPhysicalModel.addOutput(S)
myStudy.add(myPhysicalModel)
limitState1 = otguibase.LimitState('limitState1', myPhysicalModel, 'S', ot.Greater(), 0)
myStudy.add(limitState1)
myMonteCarlo = otguibase.MonteCarloReliabilityAnalysis('myMonteCarlo', limitState1, 10000)
myMonteCarlo.setMaximumCoefficientOfVariation(0.1)
myMonteCarlo.setBlockSize(1)
myMonteCarlo.setSeed(0)
myStudy.add(myMonteCarlo)

