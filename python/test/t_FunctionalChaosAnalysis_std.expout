#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function
import openturns as ot
import otguibase

myStudy = otguibase.OTStudy('myStudy')
otguibase.OTStudy.Add(myStudy)
dist_xi1 = ot.Uniform(-3.14159, 3.14159)
xi1 = otguibase.Input('xi1', 0, '', dist_xi1)
dist_xi2 = ot.Uniform(-3.14159, 3.14159)
xi2 = otguibase.Input('xi2', 0, '', dist_xi2)
dist_xi3 = ot.Uniform(-3.14159, 3.14159)
xi3 = otguibase.Input('xi3', 0, '', dist_xi3)
y0 = otguibase.Output('y0', 0, '', 'sin(xi1) + (7.0) * (sin(xi2)) ^ 2 + (0.1) * xi3^4 * sin(xi1)')
myPhysicalModel = otguibase.AnalyticalPhysicalModel('myPhysicalModel')
myPhysicalModel.addInput(xi1)
myPhysicalModel.addInput(xi2)
myPhysicalModel.addInput(xi3)
myPhysicalModel.addOutput(y0)
myStudy.add(myPhysicalModel)
values = [0, 0, 0]
lowerBounds = [-2.82743, -2.82743, -2.82743]
upperBounds = [2.82743, 2.82743, 2.82743]
levels = [2, 2, 2]
aDesign = otguibase.FixedDesignOfExperiment('aDesign', myPhysicalModel, lowerBounds, upperBounds, levels, values)
myStudy.add(aDesign)
aDesign.run()
chaos_0 = otguibase.FunctionalChaosAnalysis('chaos_0', aDesign)
chaos_0.setChaosDegree(6)
chaos_0.setSparseChaos(False)
chaos_0.setLeaveOneOutValidation(False)
myStudy.add(chaos_0)

